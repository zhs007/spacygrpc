# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import spacy_pb2 as spacy__pb2


class SpacyServStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.streamCommand = channel.stream_stream(
        '/spacy.SpacyServ/streamCommand',
        request_serializer=spacy__pb2.Command.SerializeToString,
        response_deserializer=spacy__pb2.ReplyCommand.FromString,
        )


class SpacyServServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def streamCommand(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SpacyServServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'streamCommand': grpc.stream_stream_rpc_method_handler(
          servicer.streamCommand,
          request_deserializer=spacy__pb2.Command.FromString,
          response_serializer=spacy__pb2.ReplyCommand.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'spacy.SpacyServ', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
